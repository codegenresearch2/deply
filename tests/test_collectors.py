import unittest\\\\nimport tempfile\\\\\nimport shutil\\\\\nimport os\\\\\nfrom pathlib import Path\\\\\nimport yaml\\\\\nfrom deply.collectors import FileRegexCollector, ClassInheritsCollector, BoolCollector, ClassNameRegexCollector, DecoratorUsageCollector, DirectoryCollector\\\\\nfrom deply.main import main\\\\\n\\\\nclass TestCollectors(unittest.TestCase):\\\\n    def setUp(self):\\\\n        self.test_dir = tempfile.mkdtemp()\\\\n        self.test_project_dir = Path(self.test_dir) / 'test_project'\\\\n        self.test_project_dir.mkdir()\\\\n\\\\n        # Create directories\\\\n        (self.test_project_dir / 'controllers').mkdir()\\\\n        (self.test_project_dir / 'models').mkdir()\\\\n        (self.test_project_dir / 'services').mkdir()\\\\n        (self.test_project_dir / 'utilities').mkdir()\\\\n        (self.test_project_dir / 'excluded_folder_name').mkdir()\\\\n\\\\n        # Create files in controllers\\\\n        base_controller_py = self.test_project_dir / 'controllers' / 'base_controller.py'\\\\n        base_controller_py.write_text('class BaseController:\n    pass\n') \\\\n\\\\n        user_controller_py = self.test_project_dir / 'controllers' / 'user_controller.py'\\\\n        user_controller_py.write_text('@login_required\nclass UserController(BaseController):\n    pass\n') \\\\n\\\\n        # Create files in models\\\\n        base_model_py = self.test_project_dir / 'models' / 'base_model.py'\\\\n        base_model_py.write_text('class BaseModel:\n    pass\n') \\\\n\\\\n        user_model_py = self.test_project_dir / 'models' / 'user_model.py'\\\\n        user_model_py.write_text('class UserModel(BaseModel):\n    pass\n') \\\\n\\\\n        # Create files in services\\\\n        base_service_py = self.test_project_dir / 'services' / 'base_service.py'\\\\n        base_service_py.write_text('class BaseService:\n    pass\n') \\\\n\\\\n        user_service_py = self.test_project_dir / 'services' / 'user_service.py'\\\\n        user_service_py.write_text('@service_decorator\nclass UserService(BaseService):\n    pass\n') \\\\n\\\\n        # Create utility functions\\\\n        utils_py = self.test_project_dir / 'utilities' / 'utils.py'\\\\n        utils_py.write_text('@utility_decorator\ndef helper_function():\n    pass\n') \\\\n\\\\n        # Create deprecated service\\\\n        deprecated_service_py = self.test_project_dir / 'excluded_folder_name' / 'deprecated_service.py'\\\\n        deprecated_service_py.write_text('@deprecated_service\nclass DeprecatedService(BaseService):\n    pass\n') \\\\n\\\\n    def tearDown(self):\\\\n        shutil.rmtree(self.test_dir)\\\\n\\\\n    def test_class_inherits_collector(self):\\\\n        collector_config = {"base_class": "BaseModel"}\\\\n        paths = [str(self.test_project_dir)]\\\\n        exclude_files = []\\\\n        collector = ClassInheritsCollector(collector_config, paths, exclude_files)\\\\n        collected_elements = collector.collect()\\\\n        collected_class_names = {element.name for element in collected_elements}\\\\n        expected_classes = {'UserModel'}\\\\\n        self.assertEqual(collected_class_names, expected_classes)\\\\n\\\\n    def test_file_regex_collector(self):\\\\n        collector_config = {"regex": r'.*controller.py$'}\\\\n        paths = [str(self.test_project_dir)]\\\\n        exclude_files = []\\\\n        collector = FileRegexCollector(collector_config, paths, exclude_files)\\\\n        collected_elements = collector.collect()\\\\n        collected_class_names = {element.name for element in collected_elements}\\\\n        expected_classes = {'BaseController', 'UserController'}\\\\\n        self.assertEqual(collected_class_names, expected_classes)\\\\n\\\\nif __name__ == '__main__':\\\\n    unittest.main()\\\\n