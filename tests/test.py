import unittest\nimport tempfile\nimport shutil\nimport os\nfrom pathlib import Path\nimport sys\nimport yaml\nfrom contextlib import contextmanager\nfrom io import StringIO\n\nfrom deply.main import main\n\n@contextmanager\ndef captured_output():\n    new_out, new_err = StringIO(), StringIO()\n    old_out, old_err = sys.stdout, sys.stderr\n    try:\n        sys.stdout, sys.stderr = new_out, new_err\n        yield sys.stdout, sys.stderr\n    finally:\n        sys.stdout, sys.stderr = old_out, old_err\n\nclass TestCodeAnalyzer(unittest.TestCase):\n    def setUp(self):\n        # Create a temporary directory\n        self.test_dir = tempfile.mkdtemp()\n        self.test_project_dir = Path(self.test_dir) / 'test_project'\n        self.test_project_dir.mkdir()\n\n        # Create test files and directories\n        models_dir = self.test_project_dir / 'models'\n        models_dir.mkdir()\n        base_model_py = models_dir / 'base_model.py'\n        base_model_py.write_text('class BaseModel:\n    pass\n')  # Add comment explaining the purpose of this line\n\n        my_model_py = models_dir / 'my_model.py'\n        my_model_py.write_text('from .base_model import BaseModel\n\nclass MyModel(BaseModel):\n    pass\n')  # Add comment explaining the purpose of this line\n\n        views_dir = self.test_project_dir / 'views'\n        views_dir.mkdir()\n        views_py = views_dir / 'views.py'\n        views_py.write_text('from ..models.my_model import MyModel\n\ndef my_view():\n    model = MyModel()\n')  # Add comment explaining the purpose of this line\n\n        # Write configuration file\n        self.config_yaml = Path(self.test_dir) / 'config.yaml'\n        config_data = {"deply": {"paths": ['./test_project'], "layers": [{"name": 'models', "collectors": [{"type": 'class_inherits', "base_class": 'BaseModel'}]}, {"name": 'views', "collectors": [{"type": 'file_regex', "regex": '.*/views.py'}]}]}, "ruleset": {"views": {"disallow": ['models']}}}  # Add comment explaining the structure of this dictionary\n        with self.config_yaml.open('w') as f:\n            yaml.dump(config_data, f)\n\n    def tearDown(self):\n        # Remove temporary directory\n        shutil.rmtree(self.test_dir)\n        print('Temporary directory removed.')  # Add comment explaining this line\n\n    def test_code_analyzer(self):\n        # Change current working directory to the test directory\n        old_cwd = os.getcwd()\n        os.chdir(self.test_dir)\n        try:\n            # Capture the output\n            with captured_output() as (out, err):\n                try:\n                    # Run main with the test config\n                    sys.argv = ['main.py', '--config', str(self.config_yaml)]\n                    main()\n                except SystemExit as e:\n                    exit_code = e.code\n            output = out.getvalue()\n            # Check that the exit code is 1 (violations found)\n            self.assertEqual(exit_code, 1)\n            # Check that the output contains the expected violation message\n            self.assertIn('Layer \'views\' is not allowed to depend on layer \'models\'', output)  # Ensure exact match\n        finally:\n            os.chdir(old_cwd)\n\nif __name__ == '__main__':\n    unittest.main()\n