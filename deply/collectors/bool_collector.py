import ast\\\nfrom abc import ABC, abstractmethod\\\\\nfrom pathlib import Path\\\\nfrom typing import Any, Dict, List, Set\\\\n\\\\nfrom deply.models.code_element import CodeElement\\\\nfrom .base_collector import BaseCollector\\\\nfrom .collector_factory import CollectorFactory\\\\n\\\\nclass BoolCollector(BaseCollector):\\\\n    def __init__(self, config: Dict[str, Any], paths: List[str], exclude_files: List[str]):\\\\n        self.paths = paths\\\\n        self.exclude_files = exclude_files\\\\n        self.must_configs = config.get('must', [])\\\\n        self.any_of_configs = config.get('any_of', [])\\\\n        self.must_not_configs = config.get('must_not', [])\\\\n        self.must_collectors = [CollectorFactory.create(config, self.paths, self.exclude_files) for config in self.must_configs]\\\\n        self.any_of_collectors = [CollectorFactory.create(config, self.paths, self.exclude_files) for config in self.any_of_configs]\\\\n        self.must_not_collectors = [CollectorFactory.create(config, self.paths, self.exclude_files) for config in self.must_not_configs]\\\\n\\\\n    def match_in_file(self, file_ast: ast.AST, file_path: Path) -> Set[CodeElement]:\\\\n        must_elements = []\\\\n        any_of_elements = []\\\\n\\\\n        for collector in self.must_collectors:\\\\n            must_elements.extend(collector.match_in_file(file_ast, file_path))\\\\n\\\\n        for collector in self.any_of_collectors:\\\\n            any_of_elements.extend(collector.match_in_file(file_ast, file_path))\\\\n\\\\n        must_elements_set = set(must_elements)\\\\n        any_of_elements_set = set(any_of_elements)\\\\n\\\\n        final_elements = must_elements_set.intersection(any_of_elements_set)\\\\n        for not_collector in self.must_not_collectors:\\\\n            final_elements -= set(not_collector.match_in_file(file_ast, file_path))\\\\n\\\\n        return final_elements\\\\n