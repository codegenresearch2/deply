import ast\"\nfrom pathlib import Path\"\nfrom abc import ABC, abstractmethod\"\nfrom typing import Any, Dict, List, Set\"\n\nfrom deply.models.code_element import CodeElement\"\n\nclass BaseCollector(ABC):\"\n    @abstractmethod\"\n    def match_in_file(self, file_ast: ast.AST, file_path: Path) -> Set[CodeElement]:\"\n        pass\"\n\nclass BoolCollector(BaseCollector):\"\n    def __init__(self, config: Dict[str, Any], paths: List[str], exclude_files: List[str]):\"\n        self.paths = paths\"\n        self.exclude_files = exclude_files\"\n        self.must_configs = config.get('must', [])\"\n        self.any_of_configs = config.get('any_of', [])\"\n        self.must_not_configs = config.get('must_not', [])\"\n        self.must_collectors = [CollectorFactory.create(collector_config, self.paths, self.exclude_files) for collector_config in self.must_configs]\"\n        self.any_of_collectors = [CollectorFactory.create(collector_config, self.paths, self.exclude_files) for collector_config in self.any_of_configs]\"\n        self.must_not_collectors = [CollectorFactory.create(collector_config, self.paths, self.exclude_files) for collector_config in self.must_not_configs]\"\n\n    def match_in_file(self, file_ast: ast.AST, file_path: Path) -> Set[CodeElement]:\"\n        must_elements = set()\"\n        any_of_elements = set()\"\n        for collector in self.must_collectors:\"\n            must_elements.update(collector.match_in_file(file_ast, file_path))\"\n        for collector in self.any_of_collectors:\"\n            any_of_elements.update(collector.match_in_file(file_ast, file_path))\"\n        final_elements = must_elements & any_of_elements\"\n        for collector in self.must_not_collectors:\"\n            final_elements -= collector.match_in_file(file_ast, file_path)\"\n        return final_elements\"\n