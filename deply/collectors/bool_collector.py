import ast\\nfrom abc import ABC, abstractmethod\\nfrom pathlib import Path\\nfrom typing import Any, Dict, List, Set\\n\\nfrom deply.models.code_element import CodeElement\\nfrom .base_collector import BaseCollector\\n\\nclass BoolCollector(BaseCollector):\\n    def __init__(self, config: Dict[str, Any], paths: List[str], exclude_files: List[str]):\\n        self.paths = paths\\n        self.exclude_files = exclude_files\\n        self.must_configs = config.get('must', [])\\n        self.any_of_configs = config.get('any_of', [])\\n        self.must_not_configs = config.get('must_not', [])\\n\\n    def collect(self) -> Set[CodeElement]:\\n        from .collector_factory import CollectorFactory\\n\\n        must_sets = []\\n        for collector_config in self.must_configs:\\n            collector = CollectorFactory.create(collector_config, self.paths, self.exclude_files)\\n            elements = collector.collect()\\n            must_sets.append(elements)\\n\\n        any_of_sets = []\\n        for collector_config in self.any_of_configs:\\n            collector = CollectorFactory.create(collector_config, self.paths, self.exclude_files)\\n            elements = collector.collect()\\n            any_of_sets.append(elements)\\n\\n        must_not_elements = set()\\n        for collector_config in self.must_not_configs:\\n            collector = CollectorFactory.create(collector_config, self.paths, self.exclude_files)\\n            elements = collector.collect()\\n            must_not_elements.update(elements)\\n\\n        if must_sets:\\n            must_elements = set.intersection(*must_sets)\\n        else:\\n            must_elements = None\\n\\n        if any_of_sets:\\n            any_of_elements = set.union(*any_of_sets)\\n        else:\\n            any_of_elements = None\\n\\n        if must_elements is not None and any_of_elements is not None:\\n            combined_elements = must_elements & any_of_elements\\n        elif must_elements is not None:\\n            combined_elements = must_elements\\n        elif any_of_elements is not None:\\n            combined_elements = any_of_elements\\n        else:\\n            combined_elements = set()\\n\\n        final_elements = combined_elements - must_not_elements\\n\\n        return final_elements