from typing import Any, Dict, List, Set\\nfrom deply.models.code_element import CodeElement\\nfrom .base_collector import BaseCollector\\n\\nclass BoolCollector(BaseCollector):\\n    def __init__(self, config: Dict[str, Any], paths: List[str], exclude_files: List[str]):\\n        self.paths = paths\\n        self.exclude_files = exclude_files\\n        self.must_configs = config.get('must', [])\\n        self.any_of_configs = config.get('any_of', [])\\n        self.must_not_configs = config.get('must_not', [])\\n\\n    def collect(self) -> Set[CodeElement]:\\n        from .collector_factory import CollectorFactory\\n\\n        def execute_collector(collector_configs):\\n            elements_sets = []\\n            for collector_config in collector_configs:\\n                collector = CollectorFactory.create(collector_config, self.paths, self.exclude_files)\\\\\n                elements_sets.append(collector.collect())\\\\\n            return elements_sets\\n\\n        must_sets = execute_collector(self.must_configs) if self.must_configs else []\\n        any_of_sets = execute_collector(self.any_of_configs) if self.any_of_configs else []\\n        must_not_elements = execute_collector(self.must_not_configs)[0] if self.must_not_configs else set()\\n\\n        must_elements = set.intersection(*must_sets) if must_sets else None\\n        any_of_elements = set.union(*any_of_sets) if any_of_sets else None\\n\\n        combined_elements = (must_elements & any_of_elements) if must_elements is not None and any_of_elements is not None else must_elements or any_of_elements or set()\\n        final_elements = combined_elements - must_not_elements\\n\\n        return final_elements