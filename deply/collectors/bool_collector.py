from typing import Any, Dict, List, Set\\\nfrom deply.models.code_element import CodeElement\\\\\nfrom .base_collector import BaseCollector\\\\nfrom pathlib import Path\\\\nimport ast\\\\n\\\\nclass BoolCollector(BaseCollector):\\\\n    def __init__(self, config: Dict[str, Any], paths: List[str], exclude_files: List[str]):\\\\n        self.config = config\\\\n        self.paths = paths\\\\n        self.exclude_files = exclude_files\\\\n        self.must_configs = config.get('must', [])\\\\n        self.any_of_configs = config.get('any_of', [])\\\\n        self.must_not_configs = config.get('must_not', [])\\\\n        self.must_elements = []\\\\n        self.any_of_elements = []\\\\n\\\\n    def match_in_file(self, file_ast: ast.AST, file_path: Path) -> Set[CodeElement]:\\\\n        from .collector_factory import CollectorFactory\\\\n        elements_sets = []\\\\n        for collector_config in self.must_configs:\\\\n            collector = CollectorFactory.create(collector_config, self.paths, self.exclude_files)\\\\n            elements_sets.append(collector.match_in_file(file_ast, file_path))\\\\n        must_elements = set.intersection(*elements_sets) if elements_sets else set()\\\\n\\\\n        elements_sets = []\\\\n        for collector_config in self.any_of_configs:\\\\n            collector = CollectorFactory.create(collector_config, self.paths, self.exclude_files)\\\\n            elements_sets.append(collector.match_in_file(file_ast, file_path))\\\\n        any_of_elements = set.union(*elements_sets) if elements_sets else set()\\\\n\\\\n        combined_elements = must_elements & any_of_elements\\\\n\\\\n        must_not_elements = set()\\\\n        for collector_config in self.must_not_configs:\\\\n            collector = CollectorFactory.create(collector_config, self.paths, self.exclude_files)\\\\n            must_not_elements.update(collector.match_in_file(file_ast, file_path))\\\\n\\\\n        final_elements = combined_elements - must_not_elements\\\\n\\\\n        return final_elements