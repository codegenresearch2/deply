import ast\nimport re\nfrom pathlib import Path\nfrom typing import List, Set, Tuple\n\nfrom deply.collectors import BaseCollector\nfrom deply.models.code_element import CodeElement\n\nclass FileRegexCollector(BaseCollector):\n    def __init__(self, config: dict, paths: List[str], exclude_files: List[str]):\n        self.regex_pattern = config.get("regex", "") \n        self.exclude_files_regex_pattern = config.get("exclude_files_regex", "") \n        self.element_type = config.get("element_type", "") \n        self.regex = re.compile(self.regex_pattern) \n        self.exclude_regex = re.compile(self.exclude_files_regex_pattern) if self.exclude_files_regex_pattern else None \n        self.paths = [Path(p) for p in paths] \n        self.exclude_files = [re.compile(pattern) for pattern in exclude_files] \n\n    def match_in_file(self, file_path: Path, file_ast: ast.AST) -> Set[CodeElement]:\n        if self.exclude_regex and self.exclude_regex.search(str(file_path)):\n            return set() \n        if not self.regex.match(str(file_path.relative_to(self.paths[0]))):\n            return set() \n        elements = self.get_elements_in_file(file_ast) \n        return elements \n\n    def get_elements_in_file(self, file_ast: ast.AST) -> Set[CodeElement]:\n        elements = set() \n        for node in ast.walk(file_ast):\n            if self.element_type == 'class' and isinstance(node, ast.ClassDef):\n                full_name = self._get_full_name(node) \n                code_element = CodeElement(file=file_path, name=full_name, element_type='class', line=node.lineno, column=node.col_offset) \n                elements.add(code_element) \n            elif self.element_type == 'function' and isinstance(node, ast.FunctionDef):\n                full_name = self._get_full_name(node) \n                code_element = CodeElement(file=file_path, name=full_name, element_type='function', line=node.lineno, column=node.col_offset) \n                elements.add(code_element) \n            elif self.element_type == 'variable' and isinstance(node, ast.Assign):\n                for target in node.targets:\n                    if isinstance(target, ast.Name):\n                        code_element = CodeElement(file=file_path, name=target.id, element_type='variable', line=target.lineno, column=target.col_offset) \n                        elements.add(code_element) \n        return elements \n\n    def _get_full_name(self, node):\n        names = [] \n        current = node \n        while isinstance(current, (ast.ClassDef, ast.FunctionDef)):\n            names.append(current.name) \n            current = getattr(current, 'parent', None) \n        return '.'.join(reversed(names)) \n\n    def annotate_parent(self, tree):\n        for node in ast.walk(tree):\n            for child in ast.iter_child_nodes(node):\n                child.parent = node