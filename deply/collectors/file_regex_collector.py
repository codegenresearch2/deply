import ast\nimport re\nfrom pathlib import Path\nfrom typing import List, Set, Tuple\n\nfrom deply.collectors import BaseCollector\nfrom deply.models.code_element import CodeElement\n\nclass FileRegexCollector(BaseCollector):\n    def __init__(self, config: dict, paths: List[str], exclude_files: List[str]):\n        self.regex_pattern = config.get("regex", "") \n        self.exclude_files_regex_pattern = config.get("exclude_files_regex", "") \n        self.element_type = config.get("element_type", "")  # 'class', 'function', 'variable'\n\n        self.regex = re.compile(self.regex_pattern) \n        self.exclude_regex = re.compile(self.exclude_files_regex_pattern) if self.exclude_files_regex_pattern else None\n\n        self.paths = [Path(p) for p in paths] \n        self.exclude_files = [re.compile(pattern) for pattern in exclude_files] \n\n    def match_in_file(self, file_path: Path) -> Set[CodeElement]:\n        elements = set()\n        tree = self.parse_file(file_path) \n        if tree is None:\n            return elements\n\n        if not self.element_type or self.element_type == 'class':\n            elements.update(self.get_class_names(tree, file_path))\n\n        if not self.element_type or self.element_type == 'function':\n            elements.update(self.get_function_names(tree, file_path))\n\n        if not self.element_type or self.element_type == 'variable':\n            elements.update(self.get_variable_names(tree, file_path))\n\n        return elements\n\n    def collect(self) -> Set[CodeElement]:\n        all_files = self.get_all_files()\n        collected_elements = set()\n\n        for file_path, base_path in all_files:\n            relative_path = str(file_path.relative_to(base_path))\n            if self.regex.match(relative_path):\n                elements = self.match_in_file(file_path) \n                collected_elements.update(elements) \n\n        return collected_elements\n\n    def get_all_files(self) -> List[Tuple[Path, Path]]:\n        all_files = []\n\n        for base_path in self.paths:\n            if not base_path.exists():\n                continue\n\n            files = [f for f in base_path.rglob('*.py') if f.is_file()]\n\n            # Apply global exclude patterns\n            def is_excluded(file_path: Path) -> bool:\n                relative_path = str(file_path.relative_to(base_path))\n                return any(pattern.search(relative_path) for pattern in self.exclude_files) \n\n            files = [f for f in files if not is_excluded(f)]\n\n            # Apply collector-specific exclude pattern\n            if self.exclude_regex:\n                files = [\n                    f for f in files\n                    if not self.exclude_regex.match(str(f.relative_to(base_path))) \n                ]\n\n            # Collect files along with their base path\n            files_with_base = [(f, base_path) for f in files]\n            all_files.extend(files_with_base) \n\n        return all_files\n\n    def parse_file(self, file_path: Path):\n        try:\n            with open(file_path, 'r', encoding='utf-8') as f:\n                return ast.parse(f.read(), filename=str(file_path))\n        except (SyntaxError, UnicodeDecodeError):\n            return None\n\n    def get_class_names(self, tree, file_path: Path) -> Set[CodeElement]:\n        classes = set()\n        for node in ast.walk(tree):\n            if isinstance(node, ast.ClassDef):\n                full_name = self._get_full_name(node) \n                code_element = CodeElement(\n                    file=file_path, \n                    name=full_name, \n                    element_type='class', \n                    line=node.lineno, \n                    column=node.col_offset \n                ) \n                classes.add(code_element) \n        return classes\n\n    def get_function_names(self, tree, file_path: Path) -> Set[CodeElement]:\n        functions = set()\n        for node in ast.walk(tree):\n            if isinstance(node, ast.FunctionDef):\n                full_name = self._get_full_name(node) \n                code_element = CodeElement(\n                    file=file_path, \n                    name=full_name, \n                    element_type='function', \n                    line=node.lineno, \n                    column=node.col_offset \n                ) \n                functions.add(code_element) \n        return functions\n\n    def get_variable_names(self, tree, file_path: Path) -> Set[CodeElement]:\n        variables = set()\n        for node in ast.walk(tree):\n            if isinstance(node, ast.Assign):\n                for target in node.targets:\n                    if isinstance(target, ast.Name):\n                        code_element = CodeElement(\n                            file=file_path, \n                            name=target.id, \n                            element_type='variable', \n                            line=target.lineno, \n                            column=target.col_offset \n                        ) \n                        variables.add(code_element) \n        return variables\n\n    def _get_full_name(self, node):\n        names = []\n        current = node\n        while isinstance(current, (ast.ClassDef, ast.FunctionDef)):\n            names.append(current.name) \n            current = getattr(current, 'parent', None) \n        return '.'.join(reversed(names))\n\n    def annotate_parent(self, tree):\n        for node in ast.walk(tree):\n            for child in ast.iter_child_nodes(node):\n                child.parent = node