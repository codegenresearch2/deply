import ast\\\\nimport re\\\nfrom pathlib import Path\\\nfrom typing import List, Set, Tuple\\\n\nfrom deply.collectors import BaseCollector\\\nfrom deply.models.code_element import CodeElement\\\n\nclass FileRegexCollector(BaseCollector):\\\n    def __init__(self, config: dict, paths: List[str], exclude_files: List[str]):\\\n        self.regex_pattern = config.get("regex", "")\\\n        self.exclude_files_regex_pattern = config.get("exclude_files_regex", "")\\\n        self.element_type = config.get("element_type", "")\\\n        self.regex = re.compile(self.regex_pattern)\\\n        self.exclude_regex = re.compile(self.exclude_files_regex_pattern) if self.exclude_files_regex_pattern else None\\\n        self.paths = [Path(p) for p in paths]\\\n        self.exclude_files = [re.compile(pattern) for pattern in exclude_files]\\\n\n    def match_in_file(self, file_path: Path) -> Set[CodeElement]:\\\n        if self.exclude_regex and self.exclude_regex.search(str(file_path)):\\\n            return set()\\\n        if not self.regex.match(str(file_path.relative_to(self.paths[0]))):\\\n            return set()\\\n        elements = self.get_elements_in_file(file_path)\\\n        return elements\\\n\n    def get_elements_in_file(self, file_path: Path) -> Set[CodeElement]:\\\n        elements = set()\\\n        tree = self.parse_file(file_path) \\\n        if tree is None:\\\n            return elements\\\n\n        if not self.element_type or self.element_type == 'class':\\\n            elements.update(self.get_class_names(tree, file_path))\\\n\n        if not self.element_type or self.element_type == 'function':\\\n            elements.update(self.get_function_names(tree, file_path))\\\n\n        if not self.element_type or self.element_type == 'variable':\\\n            elements.update(self.get_variable_names(tree, file_path))\\\n\n        return elements\\\n\n    def parse_file(self, file_path: Path):\\\n        try:\\\n            with open(file_path, 'r', encoding='utf-8') as f:\\\n                return ast.parse(f.read(), filename=str(file_path))\\\n        except (SyntaxError, UnicodeDecodeError):\\\n            return None\\\n\n    def get_class_names(self, tree, file_path: Path) -> Set[CodeElement]:\\\n        classes = set()\\\n        for node in ast.walk(tree):\\\n            if isinstance(node, ast.ClassDef):\\\n                full_name = self._get_full_name(node) \\\n                code_element = CodeElement(file=file_path, name=full_name, element_type='class', line=node.lineno, column=node.col_offset) \\\n                classes.add(code_element) \\\n        return classes\\\n\n    def get_function_names(self, tree, file_path: Path) -> Set[CodeElement]:\\\n        functions = set()\\\n        for node in ast.walk(tree):\\\n            if isinstance(node, ast.FunctionDef):\\\n                full_name = self._get_full_name(node) \\\n                code_element = CodeElement(file=file_path, name=full_name, element_type='function', line=node.lineno, column=node.col_offset) \\\n                functions.add(code_element) \\\n        return functions\\\n\n    def get_variable_names(self, tree, file_path: Path) -> Set[CodeElement]:\\\n        variables = set()\\\n        for node in ast.walk(tree):\\\n            if isinstance(node, ast.Assign):\\\n                for target in node.targets:\\\n                    if isinstance(target, ast.Name):\\\n                        code_element = CodeElement(file=file_path, name=target.id, element_type='variable', line=target.lineno, column=target.col_offset) \\\n                        variables.add(code_element) \\\n        return variables\\\n\n    def _get_full_name(self, node):\\\n        names = []\\\n        current = node\\\n        while isinstance(current, (ast.ClassDef, ast.FunctionDef)):\\\n            names.append(current.name) \\\n            current = getattr(current, 'parent', None) \\\n        return '.'.join(reversed(names))\\\n\n    def annotate_parent(self, tree):\\\n        for node in ast.walk(tree):\\\n            for child in ast.iter_child_nodes(node):\\\n                child.parent = node