import ast\nimport re\nfrom pathlib import Path\nfrom typing import List, Set, Tuple\n\nfrom deply.collectors import BaseCollector\nfrom deply.models.code_element import CodeElement\n\n\nclass DecoratorUsageCollector(BaseCollector):\n    def __init__(self, config: dict, paths: List[str], exclude_files: List[str]):\n        self.decorator_name = config.get('decorator_name', '')\n        self.decorator_regex_pattern = config.get('decorator_regex', '')\n        self.exclude_files_regex_pattern = config.get('exclude_files_regex', '')\n        self.decorator_regex = re.compile(self.decorator_regex_pattern) if self.decorator_regex_pattern else None\n        self.exclude_regex = re.compile(self.exclude_files_regex_pattern) if self.exclude_files_regex_pattern else None\n        self.paths = [Path(p) for p in paths]\n        self.exclude_files = [re.compile(pattern) for pattern in exclude_files]\n\n    def match_in_file(self, file_ast: ast.AST, file_path: Path) -> Set[CodeElement]:\n        if self.exclude_regex and self.exclude_regex.search(str(file_path)):\n            return set()\n\n        elements = set()\n        for node in ast.walk(file_ast):\n            if isinstance(node, (ast.FunctionDef, ast.AsyncFunctionDef, ast.ClassDef)):\n                for decorator in node.decorator_list:\n                    decorator_name = self._get_full_name(decorator)\n                    if self.decorator_name and decorator_name == self.decorator_name:\n                        full_name = self._get_full_name(node)\n                        code_element = CodeElement(\n                            file=file_path,\n                            name=full_name,\n                            element_type='function' if isinstance(node, (ast.FunctionDef, ast.AsyncFunctionDef)) else 'class',\n                            line=node.lineno,\n                            column=node.col_offset\n                        )\n                        elements.add(code_element)\n                    elif self.decorator_regex and self.decorator_regex.match(decorator_name):\n                        full_name = self._get_full_name(node)\n                        code_element = CodeElement(\n                            file=file_path,\n                            name=full_name,\n                            element_type='function' if isinstance(node, (ast.FunctionDef, ast.AsyncFunctionDef)) else 'class',\n                            line=node.lineno,\n                            column=node.col_offset\n                        )\n                        elements.add(code_element)\n        return elements\n\n    def _get_full_name(self, node):\n        if isinstance(node, ast.Name):\n            return node.id\n        elif isinstance(node, ast.Attribute):\n            value = self._get_full_name(node.value)\n            if value:\n                return f'{value}.{node.attr}'\n            else:\n                return node.attr\n        elif isinstance(node, (ast.FunctionDef, ast.AsyncFunctionDef, ast.ClassDef)):\n            names = []\n            current = node\n            while isinstance(current, (ast.FunctionDef, ast.AsyncFunctionDef, ast.ClassDef)):\n                names.append(current.name)\n                current = getattr(current, 'parent', None)\n            return '.'.join(reversed(names))\n        elif isinstance(node, ast.Call):\n            return self._get_full_name(node.func)\n        else:\n            return ''\n\n    def annotate_parent(self, tree):\n        for node in ast.walk(tree):\n            for child in ast.iter_child_nodes(node):\n                child.parent = node