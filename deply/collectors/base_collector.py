from abc import ABC, abstractmethod\\nfrom typing import Set\\nfrom ..models.code_element import CodeElement\\n\\nclass BaseCollector(ABC):\\n    def __init__(self, config: dict, paths: List[str], exclude_files: List[str]):\\n        self.config = config\\n        self.paths = paths\\n        self.exclude_files = exclude_files\\n\\n    def collect(self) -> Set[CodeElement]:\\n        elements = set()\\n        for path in self.paths:\\n            for file_path in Path(path).rglob('*.py'):\\n                if self.should_exclude(file_path):\\n                    continue\\n                with open(file_path, 'r', encoding='utf-8') as file:\\n                    tree = ast.parse(file.read(), filename=str(file_path))\\\\\n                    elements.update(self.match_in_file(tree, file_path))\\\\n        return elements\\n\\n    def should_exclude(self, file_path: Path) -> bool:\\n        return any(exclude_pattern.match(str(file_path)) for exclude_pattern in self.exclude_patterns)\\\\\n\\n    @abstractmethod\\n    def match_in_file(self, file_ast: ast.AST, file_path: Path) -> Set[CodeElement]:\\n        pass