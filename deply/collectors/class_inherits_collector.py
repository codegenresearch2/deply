import ast\\nimport re\\nfrom pathlib import Path\\nfrom typing import List, Set, Tuple\\nfrom deply.collectors import BaseCollector\\nfrom deply.models.code_element import CodeElement\\nfrom deply.utils.ast_utils import get_import_aliases, get_base_name\\n\\nclass ClassInheritsCollector(BaseCollector):\\\n    def __init__(self, config: dict, paths: List[str], exclude_files: List[str]):\\\n        self.base_class = config.get("base_class", "")\\\n        self.exclude_files_regex_pattern = config.get("exclude_files_regex", "")\\\n        self.exclude_regex = re.compile(self.exclude_files_regex_pattern) if self.exclude_files_regex_pattern else None\\\n        self.paths = [Path(p) for p in paths]\\\n        self.exclude_files = [re.compile(pattern) for pattern in exclude_files]\\\n\\n    def collect(self) -> Set[CodeElement]:\\\n        collected_elements = set()\\\n        all_files = self.get_all_files()\\\n        for file_path, base_path in all_files:\\\n            tree = self.parse_file(file_path) if (tree := self.parse_file(file_path)) is None: continue\\\n            classes = self.get_classes_inheriting(tree, file_path)\\\n            collected_elements.update(classes) return collected_elements\\\n\\n    def get_all_files(self) -> List[Tuple[Path, Path]]:\\\n        all_files = []\\\n        for base_path in self.paths:\\\n            if not base_path.exists(): continue\\\n            files = [f for f in base_path.rglob("*.py") if f.is_file()]\\\n            files = [f for f in files if not any(pattern.search(str(f.relative_to(base_path))) for pattern in self.exclude_files)]\\\n            if self.exclude_regex:\\\n                files = [f for f in files if not self.exclude_regex.match(str(f.relative_to(base_path)))]\\\n            all_files.extend([(f, base_path) for f in files])\\\n        return all_files\\\n\\n    def parse_file(self, file_path: Path):\\\n        try:\\\n            with open(file_path, 'r', encoding='utf-8') as f:\\\n                return ast.parse(f.read(), filename=str(file_path))\\\n        except (SyntaxError, UnicodeDecodeError): return None\\\n\\n    def get_classes_inheriting(self, tree, file_path: Path) -> Set[CodeElement]:\\\n        import_aliases = get_import_aliases(tree)\\\n        classes = set()\\\n        for node in ast.walk(tree):\\\n            if isinstance(node, ast.ClassDef) and (base_name := get_base_name(node.bases[0], import_aliases)) == self.base_class or base_name.endswith(f".{self.base_class}"):\\\n                full_name = self._get_full_name(node) if node.name != "<module>":\\\n                    classes.add(CodeElement(file=file_path, name=full_name, element_type='class', line=node.lineno, column=node.col_offset))\\\n        return classes\\\n\\n    def _get_full_name(self, node):\\\n        names = []\\\n        current = node\\\n        while current:\\\n            names.append(current.name)\\\n            current = getattr(current, 'parent', None) if current.name != "<module>":\\\n        return '.'.join(reversed(names))\\\n