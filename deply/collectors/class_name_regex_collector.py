import ast\\\\\nimport re\\\\\nfrom pathlib import Path\\\\\nfrom typing import List, Set\\\\\n\\\\\nfrom deply.collectors import BaseCollector\\\\\nfrom deply.models.code_element import CodeElement\\\\\n\\\\\nclass ClassNameRegexCollector(BaseCollector):\\\\\n    def __init__(self, config: dict, paths: List[str], exclude_files: List[str]):\\\\\n        self.regex_pattern = config.get('class_name_regex', '')\\\\\n        self.exclude_files_regex_pattern = config.get('exclude_files_regex', '')\\\\\n        self.regex = re.compile(self.regex_pattern)\\\\\n        self.exclude_regex = re.compile(self.exclude_files_regex_pattern) if self.exclude_files_regex_pattern else None\\\\\n\\\\\n    def match_in_file(self, file_ast: ast.AST, file_path: Path) -> Set[CodeElement]:\\\\\n        if self.exclude_regex and self.exclude_regex.search(str(file_path)):\\\\\n            return set()\\\\\n\\\\\n        classes = set()\\\\\n        for node in ast.walk(file_ast):\\\\\n            if isinstance(node, ast.ClassDef):\\\\\n                if self.regex.match(node.name):\\\\\n                    full_name = self._get_full_name(node)\\\\\n                    code_element = CodeElement(\\\\\n                        file=file_path,\\\\\n                        name=full_name,\\\\\n                        element_type='class',\\\\\n                        line=node.lineno,\\\\\n                        column=node.col_offset\\\\\n                    )\\\\\n                    classes.add(code_element)\\\\\n        return classes\\\\\n\\\\\n    def _get_full_name(self, node):\\\\\n        names = []\\\\\n        current = node\\\\\n        while isinstance(current, (ast.ClassDef, ast.FunctionDef)):\\\\\n            names.append(current.name)\\\\\n            current = getattr(current, 'parent', None)\\\\\n        return '.'.join(reversed(names))\\\\\n\\\\\n    # def annotate_parent(self, tree):\\\\\n    #     for node in ast.walk(tree):\\\\\n    #         for child in ast.iter_child_nodes(node):\\\\\n    #             child.parent = node